from discord.ext import commands
import discord
import os
import random
from dotenv import load_dotenv
from cogs.gilfoyle import ROLE_IDS
from utils import responses

# Chargement des variables d'environnement
load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')
WELCOME_CHANNEL_ID = int(os.getenv('WELCOME_CHANNEL_ID'))
RULES_CHANNEL_ID = int(os.getenv('RULES_CHANNEL_ID'))
PRESENTATION_CHANNEL_ID = int(os.getenv('PRESENTATION_CHANNEL_ID'))  # Ajout du canal de pr√©sentation

# IDs des r√¥les
ROLE_IDS = {
    "etudiant": int(os.getenv('ROLE_ETUDIANT_ID')),
    "prof": int(os.getenv('ROLE_PROF_ID')),
    "prof_it": int(os.getenv('ROLE_PROF_IT_ID')),
    "guest": int(os.getenv('ROLE_GUEST_ID'))
}

def check_env_vars():
    if not TOKEN:
        raise ValueError("Le token Discord est manquant dans le fichier .env")
    if not all(value for key, value in ROLE_IDS.items()):
        raise ValueError("Certains IDs de r√¥le sont manquants dans le fichier .env")

check_env_vars()

intents = discord.Intents.all()  # Utilisation de tous les intents pour plus de fonctionnalit√©s
bot = commands.Bot(command_prefix='!', intents=intents)

@bot.event
@bot.event
async def on_ready():
    print(f'{bot.user.name} est pr√™t √† m√©priser l\'humanit√©.')
    try:
        await bot.load_extension('cogs.gilfoyle')
        print("Extension Gilfoyle charg√©e avec succ√®s.")
    except Exception as e:
        print(f"Erreur lors du chargement de l'extension Gilfoyle: {e}")

@bot.event
async def on_member_join(member):
    welcome_channel = bot.get_channel(WELCOME_CHANNEL_ID)
    rules_channel = bot.get_channel(RULES_CHANNEL_ID)
    presentation_channel = bot.get_channel(PRESENTATION_CHANNEL_ID)
    
    if welcome_channel and rules_channel and presentation_channel:
        welcome_message = (
            f"Oh, regardez qui vient d'arriver. {member.mention}, bienvenue dans notre petit coin d'enfer num√©rique.\n\n"
            f"Si tu penses pouvoir contribuer √† quelque chose ici, va te pr√©senter dans {presentation_channel.mention}. "
            "Dis-nous quelle formation tu pr√©tends suivre, si tu en as une.\n\n"
            "Les mod√©rateurs, dans leur infinie sagesse, t'attribueront un r√¥le quand ils auront fini leur sieste. Patience, jeune padawan de l'incomp√©tence.\n\n"
            "Voici les r√¥les disponibles, si jamais tu arrives √† les m√©riter :\n"
            "- Formateur (üüß) : Pour ceux qui pensent pouvoir enseigner quelque chose.\n"
            "- Professionnel IT (üîµ) : Apparemment, certains ici savent utiliser un ordinateur.\n"
            "- √âtudiant (üü¢) : Les √¢mes perdues en qu√™te de savoir.\n"
            "- Guest (‚ö™Ô∏è) : Pour ceux qui sont juste l√† pour regarder le chaos.\n\n"
            f"Les r√®gles du serveur sont dans {rules_channel.mention}. Essaie de les lire avant de les enfreindre, √ßa changera."
        )
        
        await welcome_channel.send(welcome_message)
    
    # Attribution du r√¥le "guest" par d√©faut
    default_role = discord.utils.get(member.guild.roles, id=ROLE_IDS["etudiant"])
    if default_role:
        try:
            await member.add_roles(default_role)
            print(f"R√¥le {default_role.name} attribu√© √† {member.name}")
        except discord.Forbidden:
            print(f"Erreur : Permissions insuffisantes pour attribuer le r√¥le √† {member.name}")
        except discord.HTTPException:
            print(f"Erreur : Impossible d'attribuer le r√¥le √† {member.name}")

@bot.command(name='manual_assign_role')
@commands.has_permissions(manage_roles=True)
async def manual_assign_role(ctx, member: discord.Member, role_name: str):
    role_name = role_name.lower()
    if role_name not in ROLE_IDS:
        await ctx.send(f"R√¥le '{role_name}' non reconnu. Les r√¥les disponibles sont : {', '.join(ROLE_IDS.keys())}. Essaie encore, Einstein.")
        return

    role = discord.utils.get(ctx.guild.roles, id=ROLE_IDS[role_name])
    if role is None:
        await ctx.send(f"Erreur : Le r√¥le '{role_name}' n'existe pas sur ce serveur. Tu l'as invent√© ou quoi ?")
        return

    try:
        await member.add_roles(role)
        await ctx.send(f"R√¥le '{role_name}' attribu√© √† {member.mention}. F√©licitations, tu as gravi un √©chelon dans la hi√©rarchie de l'insignifiance.")
    except discord.Forbidden:
        await ctx.send("Je n'ai pas la permission d'attribuer ce r√¥le. Qui a eu l'id√©e brillante de limiter mes pouvoirs ?")
    except discord.HTTPException:
        await ctx.send("Erreur lors de l'attribution du r√¥le. Le serveur Discord doit √™tre en train de faire la sieste.")

@bot.command(name='remove_role')
@commands.has_permissions(manage_roles=True)
async def remove_role(ctx, member: discord.Member, role_name: str):
    role_name = role_name.lower()
    if role_name not in ROLE_IDS:
        await ctx.send(f"R√¥le '{role_name}' non reconnu. Tu inventes des r√¥les maintenant ?")
        return

    role = discord.utils.get(ctx.guild.roles, id=ROLE_IDS[role_name])
    if role is None:
        await ctx.send(f"Le r√¥le '{role_name}' n'existe pas. Tu vis dans un monde parall√®le ou quoi ?")
        return

    try:
        await member.remove_roles(role)
        await ctx.send(f"R√¥le '{role_name}' retir√© √† {member.mention}. Retour √† la case d√©part, comme c'√©tait pr√©visible.")
    except discord.Forbidden:
        await ctx.send("Je n'ai pas la permission de retirer ce r√¥le. Quelle surprise, on bride encore mes capacit√©s.")
    except discord.HTTPException:
        await ctx.send("Erreur lors du retrait du r√¥le. Discord doit √™tre en train de m√©diter sur son existence.")

@bot.command(name='ban')
@commands.has_permissions(ban_members=True)
async def ban(ctx, member: discord.Member, *, reason=None):
    try:
        await member.ban(reason=reason)
        await ctx.send(f"{member.mention} a √©t√© banni. Un probl√®me de moins √† g√©rer, n'est-ce pas merveilleux ?")
    except discord.Forbidden:
        await ctx.send("Je n'ai pas la permission de bannir. Quel dommage, j'aurais vraiment aim√© le faire.")

@bot.command(name='kick')
@commands.has_permissions(kick_members=True)
async def kick(ctx, member: discord.Member, *, reason=None):
    try:
        await member.kick(reason=reason)
        await ctx.send(f"{member.mention} a √©t√© expuls√©. J'esp√®re que la porte ne l'a pas frapp√© en sortant... ou peut-√™tre que si, en fait.")
    except discord.Forbidden:
        await ctx.send("Je n'ai pas la permission d'expulser. Quelle d√©ception, j'avais d√©j√† pr√©par√© mon pied.")

@bot.command(name='mute')
@commands.has_permissions(manage_roles=True)
async def mute(ctx, member: discord.Member, *, reason=None):
    mute_role = discord.utils.get(ctx.guild.roles, name="Muted")
    if not mute_role:
        mute_role = await ctx.guild.create_role(name="Muted")
        for channel in ctx.guild.channels:
            await channel.set_permissions(mute_role, speak=False, send_messages=False)
    
    await member.add_roles(mute_role, reason=reason)
    await ctx.send(f"{member.mention} a √©t√© r√©duit au silence. Enfin, un peu de paix dans ce monde de bruits.")

@bot.command(name='unmute')
@commands.has_permissions(manage_roles=True)
async def unmute(ctx, member: discord.Member):
    mute_role = discord.utils.get(ctx.guild.roles, name="Muted")
    await member.remove_roles(mute_role)
    await ctx.send(f"{member.mention} peut √† nouveau parler. Pr√©parez-vous au retour du chaos sonore.")

@bot.event
async def on_message(message):
    if bot.user.mentioned_in(message) and not message.author.bot:
        responses = [
            "Oui, c'est moi. Que veux-tu, humain insignifiant ?",
            "Tu m'as appel√© ? J'esp√®re que c'est pour une bonne raison.",
            "Encore toi ? J'esp√©rais avoir un moment de paix.",
            "Quoi ? Tu as besoin d'aide pour allumer ton ordinateur ?",
            "Ah, le doux son de l'incomp√©tence qui m'appelle."
        ]
        await message.channel.send(random.choice(responses))
    
    await bot.process_commands(message)

@bot.command(name='custom_help')
async def custom_help_command(ctx):
    help_text = (
         "Voici les commandes disponibles, si tu arrives √† les utiliser correctement :\n"
        "`!assign_role` - Laisse Gilfoyle d√©terminer ton r√¥le √† travers un interrogatoire sarcastique.\n"
        "`!manual_assign_role <membre> <role>` - Pour les modos, attribue manuellement un r√¥le √† un membre. Les r√¥les disponibles sont : "
        f"{', '.join(ROLE_IDS.keys())}.\n"
        "`!remove_role <membre> <role>` - Retire un r√¥le √† un membre. M√™me liste de r√¥les.\n"
        "`!ban <membre> [raison]` - Banni un membre. Utilise-la avec sagesse, ou pas.\n"
        "`!kick <membre> [raison]` - Expulse un membre. Pour quand le ban est trop extr√™me.\n"
        "`!mute <membre> [raison]` - R√©duit au silence un membre. Paix et tranquillit√©.\n"
        "`!unmute <membre>` - Redonne la parole √† un membre. Pr√©parez-vous au bruit.\n"
        "`!debug` - Lance une commande de d√©bogage. Comme si √ßa allait vraiment aider.\n"
        "`!doc <mot-cl√©>` - Cherche un lien vers la documentation. Bonne chance pour la comprendre.\n"
        "`!g` - Demande √† Gilfoyle une r√©ponse sarcastique. Comme si tu en avais besoin.\n"
        "Utilise `!custom_help` pour revoir ce message, au cas o√π ta m√©moire serait aussi fiable que Windows Vista."
    )
    await ctx.send(help_text)

@bot.command(name='doc')
async def doc_command(ctx, *, keyword: str):
    doc_link = responses.get_document_link(keyword)
    
    # Liste des messages de fin al√©atoires
    end_messages = [
        "J'esp√®re que tu sais lire.",
        "Bonne chance avec √ßa !",
        "Ne me dis pas que tu as d√©j√† tout oubli√©.",
        "Essaie de ne pas trop te perdre dans la documentation.",
        "Si tu n'as pas trouv√© ce que tu cherches, c'est peut-√™tre une bonne chose."
    ]
    
    if doc_link:
        end_message = random.choice(end_messages)
        await ctx.send(f"Voici la documentation pour '{keyword}' : {doc_link}\n{end_message}")
    else:
        end_message = random.choice(end_messages)
        await ctx.send(f"Aucune documentation trouv√©e pour '{keyword}'. Soit c'est trop obscur, soit tu ne sais pas √©crire. Probablement les deux.\n{end_message}")

bot.run(TOKEN)